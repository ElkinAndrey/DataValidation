// <auto-generated />
using System;
using DataValidationAPI.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataValidationAPI.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Data", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonProvidedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonProvidedId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.DataCheck", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "DataId");

                    b.HasIndex("DataId")
                        .IsUnique();

                    b.ToTable("DataCheck");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Data", b =>
                {
                    b.HasOne("DataValidationAPI.Domain.Entities.User", "PersonProvided")
                        .WithMany()
                        .HasForeignKey("PersonProvidedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonProvided");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.DataCheck", b =>
                {
                    b.HasOne("DataValidationAPI.Domain.Entities.Data", "Data")
                        .WithOne("DataCheck")
                        .HasForeignKey("DataValidationAPI.Domain.Entities.DataCheck", "DataId")
                        .IsRequired();

                    b.HasOne("DataValidationAPI.Domain.Entities.User", "User")
                        .WithMany("DataChecks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Data");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("DataValidationAPI.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Data", b =>
                {
                    b.Navigation("DataCheck");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("DataChecks");
                });
#pragma warning restore 612, 618
        }
    }
}
