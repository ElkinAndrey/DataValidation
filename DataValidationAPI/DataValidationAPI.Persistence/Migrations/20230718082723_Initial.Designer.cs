// <auto-generated />
using System;
using DataValidationAPI.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataValidationAPI.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230718082723_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Data", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonProvidedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonProvidedId");

                    b.ToTable("Data");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c43cc9e3-530c-446b-9acf-644d08941f79"),
                            Date = new DateTime(23, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 1",
                            PersonProvidedId = new Guid("35434031-0853-472c-8c87-3b7831e0fd17")
                        },
                        new
                        {
                            Id = new Guid("70baeb6b-e3f3-4c3c-a6d0-22c1aca1df4f"),
                            Date = new DateTime(23, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 2",
                            PersonProvidedId = new Guid("35434031-0853-472c-8c87-3b7831e0fd17")
                        },
                        new
                        {
                            Id = new Guid("9e0bac5b-2c58-43a7-b548-99a4a94728fc"),
                            Date = new DateTime(23, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 3",
                            PersonProvidedId = new Guid("35434031-0853-472c-8c87-3b7831e0fd17")
                        },
                        new
                        {
                            Id = new Guid("c0267569-6cb2-4009-8425-96af1ab376eb"),
                            Date = new DateTime(23, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 4",
                            PersonProvidedId = new Guid("35434031-0853-472c-8c87-3b7831e0fd17")
                        },
                        new
                        {
                            Id = new Guid("c9ef087d-059d-446f-a7e3-639c4f3523ee"),
                            Date = new DateTime(23, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 5",
                            PersonProvidedId = new Guid("f725550b-b2b0-4509-85bd-556535471756")
                        },
                        new
                        {
                            Id = new Guid("0cc8cf83-0dde-4fa7-a140-0c95a47dc723"),
                            Date = new DateTime(23, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 6",
                            PersonProvidedId = new Guid("f725550b-b2b0-4509-85bd-556535471756")
                        },
                        new
                        {
                            Id = new Guid("eeb851e3-61cc-410e-b572-12828858db5e"),
                            Date = new DateTime(23, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 7",
                            PersonProvidedId = new Guid("f725550b-b2b0-4509-85bd-556535471756")
                        },
                        new
                        {
                            Id = new Guid("9e943e08-112b-46e1-b56a-70f27c625617"),
                            Date = new DateTime(23, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Information = "Информация 8",
                            PersonProvidedId = new Guid("f725550b-b2b0-4509-85bd-556535471756")
                        });
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.DataCheck", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "DataId");

                    b.HasIndex("DataId")
                        .IsUnique();

                    b.ToTable("DataCheck");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("2efa388c-584b-4e8d-9c5d-29fa600cfac9"),
                            DataId = new Guid("c43cc9e3-530c-446b-9acf-644d08941f79"),
                            Valid = true
                        },
                        new
                        {
                            UserId = new Guid("ead9e0c0-395b-4489-a82b-416562905957"),
                            DataId = new Guid("70baeb6b-e3f3-4c3c-a6d0-22c1aca1df4f"),
                            Valid = false
                        },
                        new
                        {
                            UserId = new Guid("2efa388c-584b-4e8d-9c5d-29fa600cfac9"),
                            DataId = new Guid("9e0bac5b-2c58-43a7-b548-99a4a94728fc")
                        },
                        new
                        {
                            UserId = new Guid("ead9e0c0-395b-4489-a82b-416562905957"),
                            DataId = new Guid("c9ef087d-059d-446f-a7e3-639c4f3523ee"),
                            Valid = true
                        },
                        new
                        {
                            UserId = new Guid("2efa388c-584b-4e8d-9c5d-29fa600cfac9"),
                            DataId = new Guid("0cc8cf83-0dde-4fa7-a140-0c95a47dc723"),
                            Valid = false
                        },
                        new
                        {
                            UserId = new Guid("ead9e0c0-395b-4489-a82b-416562905957"),
                            DataId = new Guid("eeb851e3-61cc-410e-b572-12828858db5e")
                        });
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37491307-9159-465b-a902-855c7c315341"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("61631b6b-22d3-4a61-83d7-288ed59be881"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("7f7d960c-dfc3-4379-b1ec-6112e827862f"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35434031-0853-472c-8c87-3b7831e0fd17"),
                            Email = "1",
                            IsActive = false,
                            PasswordHash = "yE3UT3m6W4KlkNLJdTAM4UQYIZuS7QIU/6kWcAjU/mc=",
                            PasswordSalt = new byte[] { 118, 75, 18, 36, 222, 48, 190, 38, 185, 49, 119, 151, 113, 34, 164, 228 },
                            RegistrationDate = new DateTime(2023, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("37491307-9159-465b-a902-855c7c315341")
                        },
                        new
                        {
                            Id = new Guid("f725550b-b2b0-4509-85bd-556535471756"),
                            Email = "2",
                            IsActive = true,
                            PasswordHash = "KjK/J9gOLsJ5Qi8MQlpn7+G5YcU1ZnQtuZI1X+TTzy0=",
                            PasswordSalt = new byte[] { 137, 110, 127, 108, 129, 137, 155, 42, 178, 110, 230, 77, 29, 222, 131, 149 },
                            RegistrationDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("37491307-9159-465b-a902-855c7c315341")
                        },
                        new
                        {
                            Id = new Guid("2efa388c-584b-4e8d-9c5d-29fa600cfac9"),
                            Email = "3",
                            IsActive = true,
                            PasswordHash = "mVJOzj048UABroLpqaiOCXC7ov4rY/bHqr8zYznk+2I=",
                            PasswordSalt = new byte[] { 34, 54, 150, 248, 77, 23, 108, 37, 149, 29, 207, 94, 119, 12, 110, 183 },
                            RegistrationDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("61631b6b-22d3-4a61-83d7-288ed59be881")
                        },
                        new
                        {
                            Id = new Guid("ead9e0c0-395b-4489-a82b-416562905957"),
                            Email = "4",
                            IsActive = true,
                            PasswordHash = "Kfqg0txtZSqNkmeQbOosmGadf/IIaB2z3WaeMr3C1o0=",
                            PasswordSalt = new byte[] { 205, 233, 1, 141, 87, 98, 77, 54, 135, 152, 169, 87, 148, 116, 188, 201 },
                            RegistrationDate = new DateTime(2023, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("61631b6b-22d3-4a61-83d7-288ed59be881")
                        },
                        new
                        {
                            Id = new Guid("adca4721-3a4c-44ca-80a6-de74abc7450e"),
                            Email = "5",
                            IsActive = true,
                            PasswordHash = "4PDjB8dRo5n/m9N7vnYR8tM/PdyB0M7wV+dHNRAD3YQ=",
                            PasswordSalt = new byte[] { 51, 48, 107, 15, 165, 157, 219, 223, 108, 49, 81, 49, 152, 219, 5, 159 },
                            RegistrationDate = new DateTime(2023, 8, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("7f7d960c-dfc3-4379-b1ec-6112e827862f")
                        },
                        new
                        {
                            Id = new Guid("f5080b8b-9b17-497b-8fe3-9470978b0ab1"),
                            Email = "6",
                            IsActive = true,
                            PasswordHash = "Pmuehs/dEiTauUtjQXqPWSjr4XombKHPuqgZBW1JYhM=",
                            PasswordSalt = new byte[] { 128, 183, 146, 79, 41, 2, 134, 246, 132, 144, 191, 89, 214, 199, 85, 70 },
                            RegistrationDate = new DateTime(2023, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("7f7d960c-dfc3-4379-b1ec-6112e827862f")
                        });
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Data", b =>
                {
                    b.HasOne("DataValidationAPI.Domain.Entities.User", "PersonProvided")
                        .WithMany("Datas")
                        .HasForeignKey("PersonProvidedId")
                        .IsRequired();

                    b.Navigation("PersonProvided");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.DataCheck", b =>
                {
                    b.HasOne("DataValidationAPI.Domain.Entities.Data", "Data")
                        .WithOne("DataCheck")
                        .HasForeignKey("DataValidationAPI.Domain.Entities.DataCheck", "DataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataValidationAPI.Domain.Entities.User", "User")
                        .WithMany("DataChecks")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Data");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("DataValidationAPI.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Data", b =>
                {
                    b.Navigation("DataCheck");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataValidationAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("DataChecks");

                    b.Navigation("Datas");
                });
#pragma warning restore 612, 618
        }
    }
}
